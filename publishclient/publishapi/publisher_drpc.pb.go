// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.34
// source: publishclient/publishapi/protos/publisher.proto

package publishapi

import (
	bytes "bytes"
	context "context"
	errors "errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_publishclient_publishapi_protos_publisher_proto struct{}

func (drpcEncoding_File_publishclient_publishapi_protos_publisher_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_publishclient_publishapi_protos_publisher_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_publishclient_publishapi_protos_publisher_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_publishclient_publishapi_protos_publisher_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCWebPublisherClient interface {
	DRPCConn() drpc.Conn

	ResolveUri(ctx context.Context, in *ResolveUriRequest) (*ResolveUriResponse, error)
	GetPublishStatus(ctx context.Context, in *GetPublishStatusRequest) (*GetPublishStatusResponse, error)
	Publish(ctx context.Context, in *PublishRequest) (*PublishResponse, error)
	UnPublish(ctx context.Context, in *UnPublishRequest) (*Ok, error)
	ListPublishes(ctx context.Context, in *ListPublishesRequest) (*ListPublishesResponse, error)
}

type drpcWebPublisherClient struct {
	cc drpc.Conn
}

func NewDRPCWebPublisherClient(cc drpc.Conn) DRPCWebPublisherClient {
	return &drpcWebPublisherClient{cc}
}

func (c *drpcWebPublisherClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcWebPublisherClient) ResolveUri(ctx context.Context, in *ResolveUriRequest) (*ResolveUriResponse, error) {
	out := new(ResolveUriResponse)
	err := c.cc.Invoke(ctx, "/client.WebPublisher/ResolveUri", drpcEncoding_File_publishclient_publishapi_protos_publisher_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcWebPublisherClient) GetPublishStatus(ctx context.Context, in *GetPublishStatusRequest) (*GetPublishStatusResponse, error) {
	out := new(GetPublishStatusResponse)
	err := c.cc.Invoke(ctx, "/client.WebPublisher/GetPublishStatus", drpcEncoding_File_publishclient_publishapi_protos_publisher_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcWebPublisherClient) Publish(ctx context.Context, in *PublishRequest) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/client.WebPublisher/Publish", drpcEncoding_File_publishclient_publishapi_protos_publisher_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcWebPublisherClient) UnPublish(ctx context.Context, in *UnPublishRequest) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/client.WebPublisher/UnPublish", drpcEncoding_File_publishclient_publishapi_protos_publisher_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcWebPublisherClient) ListPublishes(ctx context.Context, in *ListPublishesRequest) (*ListPublishesResponse, error) {
	out := new(ListPublishesResponse)
	err := c.cc.Invoke(ctx, "/client.WebPublisher/ListPublishes", drpcEncoding_File_publishclient_publishapi_protos_publisher_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCWebPublisherServer interface {
	ResolveUri(context.Context, *ResolveUriRequest) (*ResolveUriResponse, error)
	GetPublishStatus(context.Context, *GetPublishStatusRequest) (*GetPublishStatusResponse, error)
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	UnPublish(context.Context, *UnPublishRequest) (*Ok, error)
	ListPublishes(context.Context, *ListPublishesRequest) (*ListPublishesResponse, error)
}

type DRPCWebPublisherUnimplementedServer struct{}

func (s *DRPCWebPublisherUnimplementedServer) ResolveUri(context.Context, *ResolveUriRequest) (*ResolveUriResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCWebPublisherUnimplementedServer) GetPublishStatus(context.Context, *GetPublishStatusRequest) (*GetPublishStatusResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCWebPublisherUnimplementedServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCWebPublisherUnimplementedServer) UnPublish(context.Context, *UnPublishRequest) (*Ok, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCWebPublisherUnimplementedServer) ListPublishes(context.Context, *ListPublishesRequest) (*ListPublishesResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCWebPublisherDescription struct{}

func (DRPCWebPublisherDescription) NumMethods() int { return 5 }

func (DRPCWebPublisherDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/client.WebPublisher/ResolveUri", drpcEncoding_File_publishclient_publishapi_protos_publisher_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCWebPublisherServer).
					ResolveUri(
						ctx,
						in1.(*ResolveUriRequest),
					)
			}, DRPCWebPublisherServer.ResolveUri, true
	case 1:
		return "/client.WebPublisher/GetPublishStatus", drpcEncoding_File_publishclient_publishapi_protos_publisher_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCWebPublisherServer).
					GetPublishStatus(
						ctx,
						in1.(*GetPublishStatusRequest),
					)
			}, DRPCWebPublisherServer.GetPublishStatus, true
	case 2:
		return "/client.WebPublisher/Publish", drpcEncoding_File_publishclient_publishapi_protos_publisher_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCWebPublisherServer).
					Publish(
						ctx,
						in1.(*PublishRequest),
					)
			}, DRPCWebPublisherServer.Publish, true
	case 3:
		return "/client.WebPublisher/UnPublish", drpcEncoding_File_publishclient_publishapi_protos_publisher_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCWebPublisherServer).
					UnPublish(
						ctx,
						in1.(*UnPublishRequest),
					)
			}, DRPCWebPublisherServer.UnPublish, true
	case 4:
		return "/client.WebPublisher/ListPublishes", drpcEncoding_File_publishclient_publishapi_protos_publisher_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCWebPublisherServer).
					ListPublishes(
						ctx,
						in1.(*ListPublishesRequest),
					)
			}, DRPCWebPublisherServer.ListPublishes, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterWebPublisher(mux drpc.Mux, impl DRPCWebPublisherServer) error {
	return mux.Register(impl, DRPCWebPublisherDescription{})
}

type DRPCWebPublisher_ResolveUriStream interface {
	drpc.Stream
	SendAndClose(*ResolveUriResponse) error
}

type drpcWebPublisher_ResolveUriStream struct {
	drpc.Stream
}

func (x *drpcWebPublisher_ResolveUriStream) SendAndClose(m *ResolveUriResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_publishclient_publishapi_protos_publisher_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCWebPublisher_GetPublishStatusStream interface {
	drpc.Stream
	SendAndClose(*GetPublishStatusResponse) error
}

type drpcWebPublisher_GetPublishStatusStream struct {
	drpc.Stream
}

func (x *drpcWebPublisher_GetPublishStatusStream) SendAndClose(m *GetPublishStatusResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_publishclient_publishapi_protos_publisher_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCWebPublisher_PublishStream interface {
	drpc.Stream
	SendAndClose(*PublishResponse) error
}

type drpcWebPublisher_PublishStream struct {
	drpc.Stream
}

func (x *drpcWebPublisher_PublishStream) SendAndClose(m *PublishResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_publishclient_publishapi_protos_publisher_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCWebPublisher_UnPublishStream interface {
	drpc.Stream
	SendAndClose(*Ok) error
}

type drpcWebPublisher_UnPublishStream struct {
	drpc.Stream
}

func (x *drpcWebPublisher_UnPublishStream) SendAndClose(m *Ok) error {
	if err := x.MsgSend(m, drpcEncoding_File_publishclient_publishapi_protos_publisher_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCWebPublisher_ListPublishesStream interface {
	drpc.Stream
	SendAndClose(*ListPublishesResponse) error
}

type drpcWebPublisher_ListPublishesStream struct {
	drpc.Stream
}

func (x *drpcWebPublisher_ListPublishesStream) SendAndClose(m *ListPublishesResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_publishclient_publishapi_protos_publisher_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
